# Generated by Django 5.2.6 on 2025-09-11 14:48

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExpenseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('feed', 'Feed'), ('medicine', 'Medicine'), ('equipment', 'Equipment'), ('labor', 'Labor'), ('utilities', 'Utilities'), ('maintenance', 'Maintenance'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FeedingBand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('min_weight_g', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_weight_g', models.DecimalField(decimal_places=2, max_digits=10)),
                ('feeding_rate_percent', models.DecimalField(decimal_places=2, help_text='Feeding rate as % of body weight', max_digits=5)),
                ('frequency_per_day', models.PositiveIntegerField(default=1)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['min_weight_g'],
            },
        ),
        migrations.CreateModel(
            name='FeedType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('protein_content', models.DecimalField(blank=True, decimal_places=2, help_text='Protein content %', max_digits=5, null=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='IncomeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('harvest', 'Harvest'), ('seedling', 'Seedling'), ('consulting', 'Consulting'), ('equipment_sales', 'Equipment Sales'), ('services', 'Services'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='test-tube', help_text='Icon name for UI display', max_length=50)),
                ('color', models.CharField(default='blue', help_text='Color theme for UI display', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Sample Type',
                'verbose_name_plural': 'Sample Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('scientific_name', models.CharField(blank=True, max_length=150, null=True)),
                ('description', models.TextField(blank=True)),
                ('optimal_temp_min', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('optimal_temp_max', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('optimal_ph_min', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('optimal_ph_max', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Species',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_kg', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('supplier', models.CharField(blank=True, max_length=200)),
                ('batch_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('feed_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='fish_farming.feedtype')),
            ],
            options={
                'ordering': ['feed_type__name'],
            },
        ),
        migrations.CreateModel(
            name='Pond',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('area_decimal', models.DecimalField(decimal_places=3, help_text='Area in decimal units (1 decimal = 40.46 mÂ²)', max_digits=8)),
                ('depth_ft', models.DecimalField(decimal_places=2, help_text='Depth in feet', max_digits=6)),
                ('volume_m3', models.DecimalField(decimal_places=3, help_text='Volume in cubic meters', max_digits=10)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ponds', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount_kg', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('feeding_time', models.TimeField(blank=True, null=True)),
                ('cost_per_packet', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per packet (25kg) of feed', max_digits=8, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Total cost for this feeding', max_digits=10, null=True)),
                ('consumption_rate_kg_per_day', models.DecimalField(blank=True, decimal_places=2, help_text='Daily consumption rate in kg', max_digits=8, null=True)),
                ('biomass_at_feeding_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated fish biomass at time of feeding', max_digits=10, null=True)),
                ('feeding_rate_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Feeding rate as % of biomass', max_digits=5, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('feed_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeds', to='fish_farming.feedtype')),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeds', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='EnvAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('adjustment_type', models.CharField(choices=[('water_change', 'Water Change'), ('ph_adjustment', 'pH Adjustment'), ('temperature_control', 'Temperature Control'), ('aeration', 'Aeration'), ('other', 'Other')], max_length=100)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='env_adjustments', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(max_length=100)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('message', models.TextField()),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Sampling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('ph', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('temperature_c', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dissolved_oxygen', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ammonia', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('nitrite', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('nitrate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('alkalinity', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('hardness', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('turbidity', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('fish_weight_g', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('fish_length_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samplings', to='fish_farming.pond')),
                ('sample_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samplings', to='fish_farming.sampletype')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Mortality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('count', models.PositiveIntegerField()),
                ('avg_weight_kg', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('total_weight_kg', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('cause', models.CharField(blank=True, max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mortalities', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mortalities', to='fish_farming.species')),
            ],
            options={
                'verbose_name_plural': 'Mortalities',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Income',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('quantity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('customer', models.CharField(blank=True, max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incomes', to=settings.AUTH_USER_MODEL)),
                ('income_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incomes', to='fish_farming.incometype')),
                ('pond', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incomes', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incomes', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Harvest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_weight_kg', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('pieces_per_kg', models.DecimalField(decimal_places=2, default=0, help_text='Pieces per kg', max_digits=10)),
                ('price_per_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('avg_weight_kg', models.DecimalField(decimal_places=3, default=0, max_digits=10)),
                ('total_count', models.PositiveIntegerField(blank=True, null=True)),
                ('total_revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='harvests', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='harvests', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='FeedingAdvice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('estimated_fish_count', models.PositiveIntegerField(help_text='Estimated number of fish in pond')),
                ('average_fish_weight_kg', models.DecimalField(decimal_places=3, default=0, help_text='Average fish weight in kg', max_digits=8)),
                ('total_biomass_kg', models.DecimalField(decimal_places=2, help_text='Total fish biomass in kg', max_digits=10)),
                ('recommended_feed_kg', models.DecimalField(decimal_places=2, help_text='Recommended daily feed amount in kg', max_digits=8)),
                ('feeding_rate_percent', models.DecimalField(decimal_places=2, help_text='Feeding rate as % of biomass', max_digits=5)),
                ('feeding_frequency', models.PositiveIntegerField(default=2, help_text='Recommended feeding frequency per day')),
                ('water_temp_c', models.DecimalField(blank=True, decimal_places=2, help_text='Water temperature in Celsius', max_digits=5, null=True)),
                ('season', models.CharField(choices=[('spring', 'Spring'), ('summer', 'Summer'), ('autumn', 'Autumn'), ('winter', 'Winter')], default='summer', max_length=20)),
                ('feed_cost_per_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per kg of feed', max_digits=8, null=True)),
                ('daily_feed_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Daily feed cost', max_digits=10, null=True)),
                ('is_applied', models.BooleanField(default=False, help_text='Whether this advice has been applied')),
                ('applied_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes and observations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeding_advice', to=settings.AUTH_USER_MODEL)),
                ('feed_type', models.ForeignKey(blank=True, help_text='Recommended feed type', null=True, on_delete=django.db.models.deletion.SET_NULL, to='fish_farming.feedtype')),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeding_advice', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feeding_advice', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('quantity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('supplier', models.CharField(blank=True, max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to=settings.AUTH_USER_MODEL)),
                ('expense_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='fish_farming.expensetype')),
                ('pond', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('treatment_type', models.CharField(max_length=100)),
                ('product_name', models.CharField(max_length=200)),
                ('dosage', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatments', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='KPIDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('avg_weight_g', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('total_biomass_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('survival_rate_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('feed_conversion_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('daily_feed_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('water_temp_c', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ph', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('dissolved_oxygen', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_expenses', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('total_income', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('profit_loss', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kpis', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('pond', 'date')},
            },
        ),
        migrations.CreateModel(
            name='DailyLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('weather', models.CharField(blank=True, max_length=100)),
                ('water_temp_c', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ph', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('dissolved_oxygen', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ammonia', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('nitrite', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_logs', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('pond', 'date')},
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['key'],
                'unique_together': {('user', 'key')},
            },
        ),
        migrations.CreateModel(
            name='FishSampling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('sample_size', models.PositiveIntegerField(help_text='Number of fish sampled')),
                ('total_weight_kg', models.DecimalField(decimal_places=3, help_text='Total weight of sampled fish in kg', max_digits=8)),
                ('average_weight_kg', models.DecimalField(decimal_places=3, default=0, help_text='Average weight per fish in kg', max_digits=8)),
                ('fish_per_kg', models.DecimalField(decimal_places=2, help_text='Number of fish per kg', max_digits=8)),
                ('growth_rate_kg_per_day', models.DecimalField(blank=True, decimal_places=3, help_text='Daily growth rate in kg', max_digits=8, null=True)),
                ('biomass_difference_kg', models.DecimalField(blank=True, decimal_places=3, help_text='Total biomass difference from previous sampling in kg', max_digits=10, null=True)),
                ('condition_factor', models.DecimalField(blank=True, decimal_places=3, help_text='Fish condition factor', max_digits=8, null=True)),
                ('notes', models.TextField(blank=True, help_text='Observations and notes about the sampling')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fish_samplings', to=settings.AUTH_USER_MODEL)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fish_samplings', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fish_samplings', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date', '-created_at'],
                'unique_together': {('pond', 'species', 'date')},
            },
        ),
        migrations.CreateModel(
            name='Stocking',
            fields=[
                ('stocking_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('pcs', models.PositiveIntegerField(help_text='Number of pieces stocked')),
                ('pieces_per_kg', models.DecimalField(decimal_places=2, help_text='Pieces per kg', max_digits=10)),
                ('total_weight_kg', models.DecimalField(decimal_places=3, default=0, help_text='Total weight in kg', max_digits=10)),
                ('initial_avg_weight_kg', models.DecimalField(decimal_places=3, default=0, help_text='Initial average weight in kg', max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stockings', to='fish_farming.pond')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stockings', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('pond', 'species', 'date')},
            },
        ),
        migrations.CreateModel(
            name='SurvivalRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('initial_stocked', models.PositiveIntegerField(help_text='Initial number of fish stocked')),
                ('current_alive', models.PositiveIntegerField(help_text='Current number of alive fish')),
                ('total_mortality', models.PositiveIntegerField(default=0, help_text='Total mortality count')),
                ('total_harvested', models.PositiveIntegerField(default=0, help_text='Total harvested count')),
                ('survival_rate_percent', models.DecimalField(decimal_places=2, help_text='Survival rate percentage', max_digits=5)),
                ('total_survival_kg', models.DecimalField(decimal_places=2, help_text='Total survival weight in kg', max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survival_rates', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='survival_rates', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('pond', 'species', 'date')},
            },
        ),
    ]
